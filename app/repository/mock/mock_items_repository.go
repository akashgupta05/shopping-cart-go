// Code generated by MockGen. DO NOT EDIT.
// Source: app/repository/items.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	models "github.com/akashgupta05/shopping-cart-go/app/models"
	gomock "github.com/golang/mock/gomock"
)

// MockItemRepositoryInterface is a mock of ItemRepositoryInterface interface.
type MockItemRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockItemRepositoryInterfaceMockRecorder
}

// MockItemRepositoryInterfaceMockRecorder is the mock recorder for MockItemRepositoryInterface.
type MockItemRepositoryInterfaceMockRecorder struct {
	mock *MockItemRepositoryInterface
}

// NewMockItemRepositoryInterface creates a new mock instance.
func NewMockItemRepositoryInterface(ctrl *gomock.Controller) *MockItemRepositoryInterface {
	mock := &MockItemRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockItemRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockItemRepositoryInterface) EXPECT() *MockItemRepositoryInterfaceMockRecorder {
	return m.recorder
}

// Find mocks base method.
func (m *MockItemRepositoryInterface) Find(id string) (*models.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", id)
	ret0, _ := ret[0].(*models.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockItemRepositoryInterfaceMockRecorder) Find(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockItemRepositoryInterface)(nil).Find), id)
}

// GetByName mocks base method.
func (m *MockItemRepositoryInterface) GetByName(itemName string) (*models.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByName", itemName)
	ret0, _ := ret[0].(*models.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByName indicates an expected call of GetByName.
func (mr *MockItemRepositoryInterfaceMockRecorder) GetByName(itemName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByName", reflect.TypeOf((*MockItemRepositoryInterface)(nil).GetByName), itemName)
}

// List mocks base method.
func (m *MockItemRepositoryInterface) List() ([]*models.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List")
	ret0, _ := ret[0].([]*models.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockItemRepositoryInterfaceMockRecorder) List() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockItemRepositoryInterface)(nil).List))
}

// Upsert mocks base method.
func (m *MockItemRepositoryInterface) Upsert(item *models.Item) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upsert", item)
	ret0, _ := ret[0].(error)
	return ret0
}

// Upsert indicates an expected call of Upsert.
func (mr *MockItemRepositoryInterfaceMockRecorder) Upsert(item interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upsert", reflect.TypeOf((*MockItemRepositoryInterface)(nil).Upsert), item)
}
