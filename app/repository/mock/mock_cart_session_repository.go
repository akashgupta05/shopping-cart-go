// Code generated by MockGen. DO NOT EDIT.
// Source: app/repository/cart_session.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	models "github.com/akashgupta05/shopping-cart-go/app/models"
	gomock "github.com/golang/mock/gomock"
)

// MockCartSessionsRepositoryInterface is a mock of CartSessionsRepositoryInterface interface.
type MockCartSessionsRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockCartSessionsRepositoryInterfaceMockRecorder
}

// MockCartSessionsRepositoryInterfaceMockRecorder is the mock recorder for MockCartSessionsRepositoryInterface.
type MockCartSessionsRepositoryInterfaceMockRecorder struct {
	mock *MockCartSessionsRepositoryInterface
}

// NewMockCartSessionsRepositoryInterface creates a new mock instance.
func NewMockCartSessionsRepositoryInterface(ctrl *gomock.Controller) *MockCartSessionsRepositoryInterface {
	mock := &MockCartSessionsRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockCartSessionsRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCartSessionsRepositoryInterface) EXPECT() *MockCartSessionsRepositoryInterfaceMockRecorder {
	return m.recorder
}

// GetByUserID mocks base method.
func (m *MockCartSessionsRepositoryInterface) GetByUserID(userId string) (*models.CartSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUserID", userId)
	ret0, _ := ret[0].(*models.CartSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUserID indicates an expected call of GetByUserID.
func (mr *MockCartSessionsRepositoryInterfaceMockRecorder) GetByUserID(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUserID", reflect.TypeOf((*MockCartSessionsRepositoryInterface)(nil).GetByUserID), userId)
}

// Upsert mocks base method.
func (m *MockCartSessionsRepositoryInterface) Upsert(cart *models.CartSession) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upsert", cart)
	ret0, _ := ret[0].(error)
	return ret0
}

// Upsert indicates an expected call of Upsert.
func (mr *MockCartSessionsRepositoryInterfaceMockRecorder) Upsert(cart interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upsert", reflect.TypeOf((*MockCartSessionsRepositoryInterface)(nil).Upsert), cart)
}
